<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ES6&#43; on GeekKery</title>
    <link>https://geekkery.4everland.app/tags/es6&#43;/</link>
    <description>Recent content in ES6&#43; on GeekKery</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>GeekKery</copyright>
    <lastBuildDate>Mon, 18 Apr 2022 21:17:03 +0800</lastBuildDate><atom:link href="https://geekkery.4everland.app/tags/es6+/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可选链和双问号</title>
      <link>https://geekkery.4everland.app/posts/%E5%8F%AF%E9%80%89%E9%93%BE%E5%92%8C%E5%8F%8C%E9%97%AE%E5%8F%B7/</link>
      <pubDate>Mon, 18 Apr 2022 21:17:03 +0800</pubDate>
      
      <guid>https://geekkery.4everland.app/posts/%E5%8F%AF%E9%80%89%E9%93%BE%E5%92%8C%E5%8F%8C%E9%97%AE%E5%8F%B7/</guid>
      <description>可选链 ?. 访问多层对象属性时，若其中某个对象类型错误，将导致引用错误。在已约定好类型的情况下，为获取正确的 petitioners[0].address.street.number，需对整个链路进行校验：
1 2  const petitioners = [] const num = petitioners &amp;amp;&amp;amp; petitioners[0] &amp;amp;&amp;amp; petitioners[0].address &amp;amp;&amp;amp; petitioners[0].address.street &amp;amp;&amp;amp; petitioners[0].address.street.number   可选链写法：
1 2  const petitioners = [] const num = petitioners?.[0]?.address?.street?.number // undefined，不报错   可选链操作符 ?. 允许读取位于连接对象（包括数组类型）链深处的属性的值，而不必明确验证链中的每个引用是否有效。在引用为 null 或 undefined 的情况下不会引起错误，该表达式短路返回值是 undefined。与函数调用一起使用时，如果给定的函数不存在返回 undefined，而不是抛出异常。
1  petitioner.applyForGreenCard?.() // undefined，不报错   双问号 ?? 空值合并操作符 ?? 是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。
逻辑或操作符 || 会在左侧操作数为假值时返回右侧操作数。也就是说，|| 计算值时，左侧值会进行隐式类型转换成布尔值，比如 0， &amp;lsquo;&amp;rsquo;， NaN， null， undefined 等都会返回右侧值。</description>
    </item>
    
  </channel>
</rss>
