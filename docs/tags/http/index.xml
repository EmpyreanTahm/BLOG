<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTP on GeekKery ¶ £¢∞</title>
    <link>geekkery.4everland.app/tags/http/</link>
    <description>Recent content in HTTP on GeekKery ¶ £¢∞</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>GeekKery</copyright>
    <lastBuildDate>Fri, 15 Jan 2021 20:14:56 +0800</lastBuildDate><atom:link href="geekkery.4everland.app/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅析 HTTPS</title>
      <link>geekkery.4everland.app/posts/%E6%B5%85%E6%9E%90-https/</link>
      <pubDate>Fri, 15 Jan 2021 20:14:56 +0800</pubDate>
      
      <guid>geekkery.4everland.app/posts/%E6%B5%85%E6%9E%90-https/</guid>
      <description>HTTP 的缺点 HTTP 具有相当优秀的和方便的一面，简单、灵活、易于扩展是它显著的特点。然而 HTTP 并非只有好的一面，事物皆具有两面性，它也有不足之处。
明文通信 HTTP 本身不具备加密的功能，无法做到对通信整体进行加密。按 TCP/IP 协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视。窃听相同段上的通信并非难事。只需要收集在互联网上流动的数据包，然后使用抓包或嗅探器工具对收集来的数据包进行解析即可。
不验证通信方的身份 HTTP 协议中的请求和响应不会对通信方进行确认，任何人都可以发起请求。服务器只要接收到请求，并且发送端的 IP 地址和端口号没有被 Web 服务器设定限制访问，不管对方是谁都会返回一个响应，这样会存在以下隐患：无法确定请求的目标服务器是否是按真实意图返回响应的那台服务器，有可能是已伪装的 Web 服务器；无法确定响应返回的客户端是否是按真实意图接收响应的那个客户端，有可能是已伪装的客户端；无法确定正在通信的对方是否具备访问权限；无法判定请求是来自何方、出自谁手；即使是无意义的请求也会照单全收，无法阻止海量请求下的 DoS 攻击
无法证明报文完整性 完整性是指信息的准确度。若无法证明其完整性，通常也就意味着无法判断信息是否准确。HTTP 协议无法证明通信的报文完整性，因此，在请求或响应送出之后直到对方接收之前的这段时间内，如果请求或响应遭到篡改，也没有办法获悉。
HTTPS 是什么 HTTPS（HTTP Secure）并非是应用层的一种新协议，只是 HTTP 通信接口部分用 SSL（Secure Socket Layer） 或 TLS（Transport Layer Security）协议代替而已。当使用 SSL/TLS 时，HTTP 先和 SSL/TLS 通信，再由 SSL/TLS 和 TCP 通信。在采用 SSL/TLS 后，HTTP 就拥有了 HTTPS 的加密、认证和完整性保护这些功能。
SSL 技术最初是由网景公司率先倡导的，开发过 SSL3.0 之前的版本，目前主导权已转移到 IETF（Internet Engineering Task Force，Internet 工程任务组）的手中。IETF 以 SSL3.0 为基准，后又制定了 TLS1.0、TLS1.1 和 TLS1.2。TLS 是以 SSL 为原型开发的协议，有时会统一称该协议为 SSL。当前的主流协议是 SSL3.</description>
    </item>
    
    <item>
      <title>HTTP 缓存机制</title>
      <link>geekkery.4everland.app/posts/http-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 09 Jan 2021 12:26:02 +0800</pubDate>
      
      <guid>geekkery.4everland.app/posts/http-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>HTTP 缓存通过资源复用，可以减轻服务器负担，显著提高网站和应用程序的性能。HTTP 缓存主要有客户端缓存和代理缓存，其它还包括网关缓存、CDN、反向代理缓存和负载均衡器等部署在服务器上的缓存方式。HTTP 缓存主要存储 GET 响应。
以 Chrome 为例，打开新标签页后调出 DevTools，将功能切至 NetWork，首次访问 Google 搜索页面，能看到请求：
ctrl + r 刷新页面，可看到请求：
在 Size 一栏中，可以看到部分资源来自 Memory Cache，部分来自 Disk Cache，其余从服务器获取。在首次访问页面之后，浏览器会将资源缓存，后续访问这些资源时，可直接从缓存中获取，不必再从服务器下载。
根据是否需要重新向服务器发起请求来分类，可以将 HTTP 缓存分为两类：强缓存和协商缓存。强缓存如果生效，不需要再和服务器发生交互，而协商缓存不管是否生效，都需要与服务端发生交互。强缓存的优先级高于协商缓存。
强缓存 强缓存指首次向服务器发起资源请求后，服务器会告知客户端资源缓存的有效时间，有效期内直接从客户端缓存中读取，不必与服务器交互。强缓存通过 Expires 和 Cache-Control 首部字段来实现，后者优先级更高。
Expires HTTP/1.0 定义了 Expires 响应首部字段，用于告知客户端资源缓存的过期时间，在过期时间之前请求资源直接使用缓存，不需要再次请求服务器（排除其它首部字段干扰的情况下）。
1Expires: Mon, 25 Jan 2021 23:04:06 GMT Expires 过期时间由服务器生成，是否过期的判定最终需要参考客户端时间。客户端和服务器时间可能不一致，而且客户端的时间是可以自行修改的，修改客户端时间可能导致缓存失效（如浏览器时间参考操作系统时间，修改系统时间会影响到缓存），所以不一定满足预期。
Cache-Control 为弥补 Expires 的缺点，HTTP/1.1 新增了 Cache-Control 通用首部字段，时间值为相对时间，且不依赖客户端时间，优先级高于 Expires。
   指令 类型 说明     no-cache 通用 资源正常缓存，但使用前必须进行协商校验   no-store 通用 禁用所有缓存，从源服务器获取资源   public 响应 共享缓存（中间代理和 CDN等）和私有缓存（客户端）都可以缓存响应，缺省值为 private   private 响应 只有私有缓存可以缓存响应   max-age = N 响应 缓存有效期（单位秒），为 0 时与 no-cache 效果一致   s-maxage = N 响应 覆盖 max-age，只适用于共享缓存，私有缓存会忽略   must-revalidation 响应 在缓存过期前可以使用，过期（如缓存时间超过 max-age）后必须向服务器验证   proxy-revalidation 响应 与 must-revalidate 作用相同，但仅适用于共享缓存，私有缓存会忽略。   no-transform 通用 代理不可更改媒体类型如 Content-Encoding、Content-Range、Content-Type    对于那些改动频率极低的资源如 CSS 或 JS 库，常见的做法是将 max-age 的值设为 31536000，代表一年内缓存有效。如果在缓存有效期内，内容资源内容发生了改动，可以修改资源名称，如在资源名称中加版本号或生成随机 hash。</description>
    </item>
    
  </channel>
</rss>
